# roles/db/tasks

# general tasks
- name: update /etc/hosts
  blockinfile:
    path: /etc/hosts
    marker: "# {mark} GALERA HOSTS"
    block: |
      {{ priv_ip1}} {{ host1 }}
      {{ priv_ip2}} {{ host2 }}
      {{ priv_ip3}} {{ host3 }}

- name: install mariadb and dependencies
  apt:
    pkg:
    - mariadb-server
    - mariadb-backup
    - python3-openssl
    state: present
    install_recommends: yes

- name: create mariadb.service.d directory
  file:
    path: /etc/systemd/system/mariadb.service.d
    state: directory
    mode: '0755'

- name: configure systemd service timeout
  template:
    src: timeoutstartsec.conf.j2
    dest: /etc/systemd/system/mariadb.service.d/timeoutstartsec.conf

- name: systemd daemon reload
  shell: systemctl daemon-reload

- name: start mysql
  service:
    name: mysql
    state: started
    enabled: yes

- name: run db queries
  community.mysql.mysql_query:
    login_user: root
    login_unix_socket: /run/mysqld/mysqld.sock
    query:
      - drop user if exists 'mysql'@'localhost'; # useful for testing if modifying this playbook
      - create user 'mysql'@'localhost' identified via unix_socket;
      - grant reload, lock tables, process, replication client on *.* to 'mysql'@'localhost';
      - flush privileges;
    single_transaction: yes
  register: result
  until: result is not failed
  retries: 2
  delay: 5

- name: configure ssl/tls
  import_tasks: ssl.yml

# set up galera1
- name: set galera1 hostname
  shell: hostnamectl set-hostname '{{ host1 }}'
  run_once: true
  delegate_to: localhost

- name: set facts for galera1
  set_fact:
    wsrep_cluster_name: '{{ cluster_name }}'
    wsrep_node_address: '{{ priv_ip1 }}'
    wsrep_node_name: '{{ host1 }}'
  run_once: true
  delegate_to: localhost

- name: configure galera1 galera.cnf
  template:
    src: galera.cnf.j2
    dest: /etc/mysql/conf.d/galera.cnf
  run_once: true
  delegate_to: localhost

# set up galera2
- name: set galera2 hostname
  shell: hostnamectl set-hostname '{{ host2 }}'
  run_once: true
  delegate_to: "{{groups['galera_servers'][0]}}"

- name: set facts for galera2
  set_fact:
    wsrep_cluster_name: '{{ cluster_name }}'
    wsrep_node_address: '{{ priv_ip2 }}'
    wsrep_node_name: '{{ host2 }}'
  run_once: true
  delegate_to: "{{groups['galera_servers'][0]}}"

- name: configure galera2 galera.cnf
  template:
    src: galera.cnf.j2
    dest: /etc/mysql/conf.d/galera.cnf
  run_once: true
  delegate_to: "{{groups['galera_servers'][0]}}"

# set up galera3
- name: set galera3 hostname
  shell: hostnamectl set-hostname '{{ host3 }}'
  run_once: true
  delegate_to: "{{groups['galera_servers'][1]}}"

- name: set facts for galera3
  set_fact:
    wsrep_cluster_name: '{{ cluster_name }}'
    wsrep_node_address: '{{ priv_ip3 }}'
    wsrep_node_name: '{{ host3 }}'
  run_once: true
  delegate_to: "{{groups['galera_servers'][1]}}"

- name: configure galera3 galera.cnf
  template:
    src: galera.cnf.j2
    dest: /etc/mysql/conf.d/galera.cnf
  run_once: true
  delegate_to: "{{groups['galera_servers'][1]}}"

# bootstrap the cluster
- name: stop mysql
  service:
    name: mysql
    state: stopped

- name: bootstrap galera1
  shell: galera_new_cluster
  run_once: true
  delegate_to: localhost

- name: start galera2 mysql
  systemd:
    name: mysql
    state: started
  run_once: true
  delegate_to: "{{groups['galera_servers'][0]}}"

- name: start galera3 mysql
  systemd:
    name: mysql
    state: started
  run_once: true
  delegate_to: "{{ groups['galera_servers'][1] }}"

# remote hosts firewall
- name: install firewalld on {{ host2 }} and {{ host3 }}
  apt:
    name: firewalld
    state: latest
  run_once: true
  delegate_to: "{{ item }}"
  loop:
    - "{{ groups['galera_servers'][0] }}"
    - "{{ groups['galera_servers'][1] }}"

- name: update firewalld.conf on {{ host2 }} and {{ host3 }}
  lineinfile:
    path: /etc/firewalld/firewalld.conf
    regexp: '^IndividualCalls=no'
    line: IndividualCalls=yes
  run_once: true
  delegate_to: "{{ item }}"
  loop:
    - "{{ groups['galera_servers'][0] }}"
    - "{{ groups['galera_servers'][1] }}"

- name: configure firewalld galera service on {{ host2 }} and {{ host3 }}
  template:
    src: firewalld-services-galera.j2
    dest: /etc/firewalld/services/galera.xml
  #notify: remote firewalld enable
  run_once: true
  delegate_to: "{{ item }}"
  loop:
    - "{{ groups['galera_servers'][0] }}"
    - "{{ groups['galera_servers'][1] }}"
  

- name: configure firewalld internal zone on {{ host2 }} and {{ host3 }}
  template:
    src: firewalld-zones-internal.j2
    dest: /etc/firewalld/zones/internal.xml
  #notify: remote firewalld reload
  run_once: true
  delegate_to: "{{ item }}"
  loop:
    - "{{ groups['galera_servers'][0] }}"
    - "{{ groups['galera_servers'][1] }}"
  
# new
- name: remote firewalld enable
  service:
    name: firewalld
    state: started
    enabled: yes
  run_once: true
  delegate_to: '{{ item }}'
  loop:
    - "{{ groups['galera_servers'][0] }}"
    - "{{ groups['galera_servers'][1] }}"

- name: remote firewalld reload
  shell: firewall-cmd --reload
  run_once: true
  delegate_to: '{{ item }}'
  loop:
    - "{{ groups['galera_servers'][0] }}"
    - "{{ groups['galera_servers'][1] }}"
# end new

# localhost firewall
- name: install firewalld on {{ host1 }}
  apt:
    name: firewalld
    state: latest
  run_once: true
  delegate_to: localhost

- name: update firewalld.conf on {{ host1 }}
  lineinfile:
    path: /etc/firewalld/firewalld.conf
    regexp: '^IndividualCalls=no'
    line: IndividualCalls=yes
  run_once: true
  delegate_to: localhost

- name: configure firewalld galera service on {{ host1 }}
  template:
    src: firewalld-services-galera.j2
    dest: /etc/firewalld/services/galera.xml
  run_once: true
  delegate_to: localhost
  #notify: local firewalld enable

- name: configure firewalld internal zone on {{ host1 }}
  template:
    src: firewalld-zones-internal.j2
    dest: /etc/firewalld/zones/internal.xml
  run_once: true
  delegate_to: localhost
  #notify: local firewalld reload

  # new
- name: local firewalld enable
  service:
    name: firewalld
    state: started
    enabled: yes
  run_once: true
  delegate_to: localhost

- name: local firewalld reload
  shell: firewall-cmd --reload
  run_once: true
  delegate_to: localhost
  # end new